<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lx.Common.Interface</name>
    </assembly>
    <members>
        <member name="T:Lx.Common.Interface.ICacheStrategy">
            <summary>
            功能描述：缓存接口类
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Add(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
               功能：添加缓存项(服务器上如果Key存在则不添加,否则添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空，表示无过期时间</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.AddAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：添加缓存项(服务器上如果Key存在则不添加,否则添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空，表示无过期时间</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空表示不设过期时间</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空表示不设过期时间</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.RemoveAll">
            <summary>
                功能：移除所有缓存项
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.RemoveAllAsync">
            <summary>
                功能：移除所有缓存项
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Remove(System.String)">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="key">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.RemoveAsync(System.String)">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="key">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Get``1(System.String)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <typeparam name="T">缓存项的类型</typeparam>
            <param name="key">缓存项的键值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetAsync``1(System.String)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <typeparam name="T">缓存项的类型</typeparam>
            <param name="key">缓存项的键值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：批量获取缓存
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="keys">缓存键数组</param>
            <returns>缓存对像集合</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：批量获取缓存
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="keys">缓存键数组</param>
            <returns>缓存对像集合</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.InitCounterAsync(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.ChangeCounterAsync(System.String,System.Int64)">
            <summary>
                功能：调整计数器
            </summary>
            <param name="key">计数器的键值</param>
            <param name="value">要调整的值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetCounterAsync(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.InitCounter(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.ChangeCounter(System.String,System.Int64)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">要增加的值</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetCounter(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.InitCounterAsync(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.ChangeCounterAsync(System.String,System.Double)">
            <summary>
                功能：调整计数器
            </summary>
            <param name="key">计数器的键值</param>
            <param name="value">要调整的值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetDoubleCounterAsync(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.InitCounter(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.ChangeCounter(System.String,System.Double)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">要增加的值</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.GetDoubleCounter(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.Contains(System.String)">
            <summary>
                功能：判断缓存项是否存在
            </summary>
            <param name="key">缓存项键值</param>
            <returns>缓存项是否存在</returns>
        </member>
        <member name="M:Lx.Common.Interface.ICacheStrategy.ContainsAsync(System.String)">
            <summary>
                功能：判断缓存项是否存在
            </summary>
            <param name="key">缓存项键值</param>
            <returns>缓存项是否存在</returns>
        </member>
        <member name="T:Lx.Common.Interface.IDBDataSource">
            <summary>
            数据库数据源接口
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IDBDataSource.IsDefault">
            <summary>
                是否系统默认数据源
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IDBDataSource.ExcuteTimeout">
            <summary>
                命令执行超时时间
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IDBDataSource.WriteConnectionString">
            <summary>
                写入数据库的连接字符串
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IDBDataSource.ReadConnectionString">
            <summary>
                读取数据库的连接字符串
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IDBDataSource.CommonConnectionString">
            <summary>
                公共数据库的连接字符串
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetDBCurrentTime">
            <summary>
            功能:获取数据库当前时间函数名称
            </summary>
            <returns>数据库当前时间函数名称</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            功能描述:开启一个整体事物 
            </summary>
            <param name="tranLevel">事物级别</param>
            <returns>事物对象</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.TestConnection">
            <summary>
            功能:测试连接
            </summary>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetLeftColumnSymbol">
            <summary>
            功能:获取字段左引用符号
            </summary>
            <returns>字段左引用符号</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetRightColumnSymbol">
            <summary>
            功能:获取字段右引用符号
            </summary>
            <returns>字段右引用符号</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetParameterSymbol">
            <summary>
            功能:获取参数符号
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.UniformCommandText(System.String)">
            <summary>
            功能:统一数据库脚本
            </summary>
            <param name="strCmdText">sql脚本</param>
            <returns>统一后的脚本</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetPageSql(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="intPageNo">页码</param>
            <param name="intPageSize">页大小</param>
            <param name="strSortBy">排序信息</param>        
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.QueryData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="cmdText">查询命令</param>
            <param name="cmdType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.QueryData(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="cmdText">查询命令</param>
            <param name="cmdType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="outPutValue">输出参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.SaveData(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:保存数据到数据库(包括新增、修改、删除)
            </summary>       
            <param name="cmdText">保存命令</param>
            <param name="cmdType">命令类型</param>
            <param name="lstParameters">命令参数列表</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:获取数据库单值
            </summary>       
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteNonQuery(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <param name="outPutValue">输出参数值</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteReaderReturnT``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteWriteReturnT``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:写入操作，并返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteReaderReturnTAsync``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteReaderReturnListT``1(System.String,System.Object)">
            <summary>
            功能:返回多条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteReaderReturnListTAsync``1(System.String,System.Object)">
            <summary>
            功能:返回多条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteUpdate(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="dbTrans"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteUpdateAsync(System.String,System.Object)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.AddOrmData``1(``0,System.Boolean)">
            <summary>
            功能:添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>添加结果</returns>
        </member>
        <!-- 对于成员“M:Lx.Common.Interface.IDBDataSource.AddOrmData``1(``0,System.Data.IDbTransaction)”忽略有格式错误的 XML 注释 -->
        <member name="M:Lx.Common.Interface.IDBDataSource.AddOrmData``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            功能:批量添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>添加结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.AddOrmData``1(System.Collections.Generic.List{``0},System.Data.IDbTransaction)">
            <summary>
            功能:批量添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>添加结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.UpdateOrmData``1(``0,System.Boolean)">
            <summary>
            功能:更新Orm数据
            </summary>
            <typeparam name="T">待更新的类型</typeparam>
            <param name="objData">待更新数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.UpdateOrmData``1(``0,System.Data.IDbTransaction)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.DeleteOrmData``1(``0,System.Boolean)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.DeleteOrmData``1(``0,System.Data.IDbTransaction)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmDataByID``1(System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取主键数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="id">主键值</param>  
            <param name="dbTrans">事物对象</param>
            <returns>主键数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteOrmScalar(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.Boolean)">
            <summary>
                功能：获取数据库单值,同 ExecuteScalar, 只是参数不一样
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="parames">命令参数</param>
            <param name="dbTrans">事物对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteOrmScalarAsync(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.Boolean)">
            <summary>
                功能：获取数据库单值,同 ExecuteScalar, 只是参数不一样
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="parames">命令参数</param>
            <param name="dbTrans">事物对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteOrmData(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">命令执行事物</param>
            <param name="dbTrans">事物对象</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ExecuteOrmDataAsync(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            功能:异步执行sql，返回影响行数
            </summary>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">命令执行事物</param>
            <param name="dbTrans">事物对象</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetSingleOrmData``1(System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>   
            <param name="dbTrans">事物对象</param>
            <returns>主键数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetSingleOrmData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetSingleOrmDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmData``1(System.Object,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmData``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>        
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:异步获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmMultipleData``2(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmMultipleDataAsync``2(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmMultipleData``3(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <typeparam name="T3">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmMultipleDataAsync``3(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <typeparam name="T3">数据类型3</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>        
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>  
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>       
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>  
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int64@,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>        
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>   
            <param name="dbTrans">事物对象</param>
            <param name="totalCount">数据总数</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.String,System.Boolean,System.Int64@,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>       
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>  
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="dbTrans">事物对象</param>
            <param name="totalCount">数据总数</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetSingleOrmCommonData``1(System.Object)">
            <summary>
            功能:获取公共单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>       
            <returns>主键数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmCommonData``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:获取公共库列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>        
            <param name="cmdType">命令类型</param>       
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageCommonData``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:获取公共库分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>       
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.GetOrmPageCommonDataAsync``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:异步获取公共数据库分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>        
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.CreateCommonConnection">
            <summary>
            功能:创建公共数据库连接对象
            </summary>       
            <returns>数据库连接对象</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.CreateConnection(System.Boolean)">
            <summary>
            功能:创建数据库连接对象
            </summary>
            <param name="blnWrite">是否写数据库</param>
            <returns>数据库连接对象</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ConvertSortInfo(System.String,System.Boolean)">
            <summary>
            功能:转换排序信息
            </summary>
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <returns>转换后的排序信息</returns>
        </member>
        <member name="M:Lx.Common.Interface.IDBDataSource.ConvertSortInfo(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            功能:转换排序信息
            </summary>
            <param name="sortInfo">排序信息</param>
            <returns>转换后的排序信息</returns>
        </member>
        <member name="T:Lx.Common.Interface.IMessageQueue">
            <summary>
             功能描述：消息队列接口
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IMessageQueue.GetMessagePublisher(System.String)">
            <summary>
             功能描述：获取一个消息发布者
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IMessageQueue.GetBroadcastPublisher(System.String)">
            <summary>
            功能描述：获取一个广播消息发布者
            </summary>
            <param name="queue">队列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IMessageQueue.GetMessageReceiver(System.String,System.String)">
            <summary>
             功能描述：获取一个消息接收者对象
            </summary>
            <param name="queue">列表名称</param>
            <param name="receiverId">接收对象 Id</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Interface.IMessageQueue.GetBroadcastReceiver(System.String,System.String)">
            <summary>
                功能描述：获取一个广播消息发布者
            </summary>
            <param name="broadcastName">队列名称</param>
            <param name="receiverId">接收对象 Id</param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Interface.IMessageReceiver">
            <summary>
            功能描述：消息接收者
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IMessageReceiver.Start">
            <summary>
            功能描述：启动监听
            </summary>
        </member>
        <member name="E:Lx.Common.Interface.IMessageReceiver.Received">
            <summary>
            消息接收事件
            </summary>
        </member>
        <member name="T:Lx.Common.Interface.IBroadcastReceiver">
            <summary>
             功能描述：消息接收者
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IBroadcastReceiver.Start">
            <summary>
            功能描述：启动监听
            </summary>
        </member>
        <member name="E:Lx.Common.Interface.IBroadcastReceiver.Received">
            <summary>
            消息接收事件
            </summary>
        </member>
        <member name="T:Lx.Common.Interface.MessageEventArgs">
            <summary>
             功能描述：消息事件参数
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.MessageEventArgs.Message">
            <summary>
                消息正文
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.MessageEventArgs.ChannelName">
            <summary>
                通道名
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.MessageEventArgs.#ctor(System.String,System.Object)">
            <summary>
            功能描述：创建一个消息事件
            </summary>
            <param name="channelName">通道</param>
            <param name="message">消息正文</param>
        </member>
        <member name="T:Lx.Common.Interface.IMessagePublisher">
            <summary>
            功能描述：点对点消息发布器
            </summary>
        </member>
        <member name="M:Lx.Common.Interface.IMessagePublisher.Put(System.Object)">
            <summary>
                功能描述：发送一个消息，将消息发入队列
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Lx.Common.Interface.IMessagePublisher.PutAsync(System.Object)">
             <summary>
            功能描述：发送一个消息，将消息发入队列(异步)
             </summary>
             <param name="target"></param>
        </member>
        <member name="T:Lx.Common.Interface.IBroadcastPublisher">
             <summary>
            功能描述：广播消息发布器
             </summary>
        </member>
        <member name="M:Lx.Common.Interface.IBroadcastPublisher.Put(System.Object)">
            <summary>
             功能描述：发送一个消息，将消息发入队列
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Lx.Common.Interface.IBroadcastPublisher.PutAsync(System.Object)">
             <summary>
            功能描述：发送一个消息，将消息发入队列(异步)
             </summary>
             <param name="target"></param>
        </member>
        <member name="T:Lx.Common.Interface.IIdentityMessage">
            <summary>
            功能描述：消息类
            </summary>
        </member>
        <member name="P:Lx.Common.Interface.IIdentityMessage.MessageId">
            <summary>
            消息ID
            </summary>
        </member>
    </members>
</doc>
