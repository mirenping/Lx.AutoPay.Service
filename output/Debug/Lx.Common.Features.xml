<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lx.Common.Features</name>
    </assembly>
    <members>
        <member name="T:Lx.Common.Features.Helper.CacheHelper">
            <summary>
            功能描述：缓存帮助类
            </summary>
        </member>
        <member name="F:Lx.Common.Features.Helper.CacheHelper.s_cacheExpiration">
            <summary>
                缓存过期时间(分钟)
            </summary>
        </member>
        <member name="F:Lx.Common.Features.Helper.CacheHelper.s_cacheStrategy">
            <summary>
                缓存策略实例
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.#cctor">
            <summary>
                功能：静态构造函数，创建默认的缓存实例
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.CreateCacheStrategy(Lx.Common.Models.Var.CacheStrategyType)">
            <summary>
                功能：创建缓存实例
            </summary>
            <param name="csType">缓存策略类别</param>
            <returns>缓存实例</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Set(System.String,System.Object)">
            <summary>
                功能：设置永久缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Add(System.String,System.Object)">
            <summary>
                功能：设置永久缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.AddAsync(System.String,System.Object)">
            <summary>
                功能：设置永久缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Set(System.String,System.Object,System.Double)">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="numOfMinutes">缓存过期时间(单位:分)</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.SetAsync(System.String,System.Object,System.Double)">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="numOfMinutes">缓存过期时间(单位:分)</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.InitCounter(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">初始值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.InitCounter(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">初始值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.InitCounterAsync(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">初始值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.InitCounterAsync(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">初始值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.ChangeCounter(System.String,System.Int64)">
            <summary>
                功能：改变计数器的值
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">改变量</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.ChangeCounter(System.String,System.Double)">
            <summary>
                功能：改变计数器的值
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">改变量</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.ChangeCounterAsync(System.String,System.Int64)">
            <summary>
                功能：改变计数器的值
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">改变量</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.ChangeCounterAsync(System.String,System.Double)">
            <summary>
                功能：改变计数器的值
            </summary>
            <param name="key">计数器名称</param>
            <param name="value">改变量</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.GetCounter(System.String)">
            <summary>
                功能：获取计数器的当前值
            </summary>
            <param name="key">计数器名称</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.GetDoubleCounter(System.String)">
            <summary>
                功能：获取计数器的当前值
            </summary>
            <param name="key">计数器名称</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.GetCounterAsync(System.String)">
            <summary>
                功能：获取计数器的当前值
            </summary>
            <param name="key">计数器名称</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.GetDoubleCounterAsync(System.String)">
            <summary>
                功能：获取计数器的当前值
            </summary>
            <param name="key">计数器名称</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.RemoveAll">
            <summary>
                功能：移除所有缓存项
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Remove(System.String)">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="key">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="keys">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Get``1(System.String)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <typeparam name="T">缓存项的类型</typeparam>
            <param name="key">缓存项的键值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.LoadFromCache``1(System.String,System.Func{``0})">
            <summary>
                功能：从缓存加载数据，如果没有，则从回调加载数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.CacheHelper.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：批量获取缓存
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="keys">缓存键数组</param>
            <returns>缓存对像集合</returns>
        </member>
        <member name="T:Lx.Common.Features.Helper.ComponentLoader">
            <summary>
            组件加载类
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.ComponentLoader.Load``1(Lx.Common.Models.JsonConfigInfo)">
            <summary>
                功能：加载组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Features.Helper.ConfigHelper">
            <summary>
            功能描述:配置帮助类  
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.GetExeConfigFilePath">
            <summary>
            功能:获取程序配置文件路径
            </summary>
            <returns>程序配置文件路径</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.LoadFromFile(System.String)">
            <summary>
            功能:加载Json配置文件信息
            </summary>
            <param name="configFile">Json配置文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.LoadFromString(System.String)">
            <summary>
            功能: 从字符串加载配置
            </summary>
            <param name="json">配置字符串</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.LoadFromObject(System.Object)">
            <summary>
            功能: 从字符串加载配置
            </summary>
            <param name="config">配置对象</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.GetConfigValue``1(System.String,System.String)">
            <summary>
            功能: 获取转换类型后的配置值
            </summary>       
            <typeparam name="T">转换的类型</typeparam>
            <param name="strConfigKey">待转换类型的配置键值</param>
            <param name="strDefaultValue">默认值</param>
            <returns>转换类型后的配置值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ConfigHelper.GetStringValue(System.String,System.String)">
            <summary>
            功能: 获取字符串类型配置值
            </summary>       
            <param name="strConfigKey">配置键值</param>
            <param name="strDefaultValue">默认值</param>
            <returns>字符串类型配置值</returns>
        </member>
        <member name="T:Lx.Common.Features.Helper.DBDataSourceHelper">
            <summary>
            DB数据源帮助类  
            </summary>
        </member>
        <member name="P:Lx.Common.Features.Helper.DBDataSourceHelper.WriteConnectionString">
            <summary>
                数据库的连接字符串
            </summary>
        </member>
        <member name="P:Lx.Common.Features.Helper.DBDataSourceHelper.ReadConnectionString">
            <summary>
                数据库的连接字符串
            </summary>
        </member>
        <member name="P:Lx.Common.Features.Helper.DBDataSourceHelper.CommonConnectionString">
            <summary>
                公共数据库的连接字符串
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteTranscationTask``1(System.Func{System.Data.IDbTransaction,``0})">
            <summary>
            功能描述:执行整体事物性事物
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="funcTask">任务委托</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetCountSql(System.String)">
            <summary>
            功能:获取总数Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>       
            <returns>总数Sql</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.CreateDataSource(Lx.Common.Models.Var.DBDataSourceType)">
            <summary>
            功能:创建数据源实例
            </summary>
            <param name="dbType">数据源类型</param>
            <returns>数据源实例</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.QueryData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能: 从数据库中查询数据
            </summary>       
            <param name="cmdText">查询命令</param>
            <param name="cmdType">命令类型</param>
            <param name="cmdParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.QueryData(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="cmdText">查询命令</param>
            <param name="cmdType">命令类型</param>
            <param name="cmdParameters">命令参数</param>
            <param name="outPutValue">输出参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetPageSql(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="intPageNo">页码</param>
            <param name="intPageSize">页大小</param>
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>   
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetPageSql(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="intPageNo">页码</param>
            <param name="intPageSize">页大小</param>
            <param name="sortField">排序字段，自行在排序字段中指定是升序还是降序</param>
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetPageSql(System.String,Lx.Common.Models.Para.PageInfoParam)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="pageInfoParam">分页对象</param>
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetPageSql``1(System.String,Lx.Common.Models.Para.PageInfoParam{``0})">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="pageInfoParam">分页对象</param>
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteScalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:获取数据库单值
            </summary>       
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="cmdParameters">命令参数</param>  
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="cmdParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteNonQuery(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能: 执行命令语句
            </summary>
            <param name="cmdText">命令</param>
            <param name="outPutValue">输出参数值</param>
            <param name="cmdType">命令类型</param>
            <param name="cmdParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteReaderReturnT``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteWriteReturnT``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:写入操作，并返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteReaderReturnTAsync``1(System.String,System.Object,System.Boolean)">
            <summary>
            功能:返回一条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteReaderReturnListT``1(System.String,System.Object)">
            <summary>
            功能:返回多条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteReaderReturnListTAsync``1(System.String,System.Object)">
            <summary>
            功能:返回多条记录
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数,执行条件查询时要参数化</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteUpdate(System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="dbTrans">事务处理</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteUpdateAsync(System.String,System.Object)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.AddOrmData``1(``0,System.Boolean)">
            <summary>
            功能:添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>添加结果</returns>
        </member>
        <!-- 对于成员“M:Lx.Common.Features.Helper.DBDataSourceHelper.AddOrmTranData``1(``0,System.Data.IDbTransaction)”忽略有格式错误的 XML 注释 -->
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.AddOrmData``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            功能:批量添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>添加结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.AddOrmTranData``1(System.Collections.Generic.List{``0},System.Data.IDbTransaction)">
            <summary>
            功能:批量添加Orm数据
            </summary>
            <typeparam name="T">待添加的类型</typeparam>
            <param name="objData">待添加数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>添加结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.UpdateOrmData``1(``0,System.Boolean)">
            <summary>
            功能:更新Orm数据
            </summary>
            <typeparam name="T">待更新的类型</typeparam>
            <param name="objData">待更新数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.UpdateOrmTranData``1(``0,System.Data.IDbTransaction)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.DeleteOrmData``1(``0,System.Boolean)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="useTran">是否使用事物</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.DeleteOrmTranData``1(``0,System.Data.IDbTransaction)">
            <summary>
            功能:删除Orm数据
            </summary>
            <typeparam name="T">待删除的类型</typeparam>
            <param name="objData">待删除数据</param>
            <param name="dbTrans">事物对象</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteOrmScalar``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
                功能：获取数据库单值,
                功能：获取数据库单值,同 ExecuteScalar, 只是参数不一样
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="parames">命令参数</param>
            <param name="dbTrans">事物对象</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteOrmScalarAsync(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.Boolean)">
            <summary>
                功能：异步获取数据库单值,同 ExecuteScalar, 只是参数不一样
            </summary>
            <param name="cmdText">命令</param>
            <param name="cmdType">命令类型</param>
            <param name="parames">命令参数</param>
            <param name="dbTrans">事物对象</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteOrmData(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            功能:执行sql，返回影响行数
            </summary>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">命令执行事物</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.ExecuteOrmDataAsync(System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            功能:异步执行sql，返回影响行数
            </summary>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">命令执行事物</param>
            <param name="dbTrans">事物对象</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetSingleOrmData``1(System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>    
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>主键数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetSingleOrmData``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="expression">主键字段表达式</param>
            <param name="id">主键值</param>
            <param name="dbTrans">事物对象</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetSingleOrmData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetSingleOrmDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            功能:获取单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>             
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <param name="useWriteConn">是否使用写数据库连接</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmData``1(System.Object,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmData``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageDataAsync``1(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:异步获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.String,Lx.Common.Models.Para.PageInfoParam,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(原始语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageDataAsync``1(System.String,Lx.Common.Models.Para.PageInfoParam,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:异步获取分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(原始语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmMultipleData``2(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmMultipleDataAsync``2(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmMultipleData``3(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <typeparam name="T3">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmMultipleDataAsync``3(System.String,System.Data.CommandType,System.Object,System.Data.IDbTransaction)">
            <summary>
            功能:获取多项数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>
            <typeparam name="T2">数据类型2</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>
            <param name="dbTrans">事物对象</param>
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>        
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>   
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>       
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>  
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int64@,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>
            <param name="sortInfo">排序信息(多字段排序)</param>        
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>   
            <param name="totalCount">数据总数</param>
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageData``1(System.Object,System.Int32,System.Int32,System.String,System.Boolean,System.Int64@,System.Data.IDbTransaction)">
            <summary>
            功能:获取分页数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="predicate">查询条件谓语对象</param>       
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>  
            <param name="sortField">排序字段</param>
            <param name="isAscending">是否升序</param>
            <param name="totalCount">数据总数</param>
            <param name="dbTrans">事物对象</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetSingleOrmCommonData``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            功能:获取公共库单一数据（主要用于主键获取)
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="expression">主键字段表达式</param>
            <param name="id">主键值</param>      
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmCommonData``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:获取公共库列表数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="cmdText">查询命令</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>       
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageCommonData``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:获取公共库分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>       
            <returns>列表数据</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.DBDataSourceHelper.GetOrmPageCommonDataAsync``1(System.String,System.Data.CommandType,System.Object)">
            <summary>
            功能:异步获取公共数据库分页数据
            </summary>
            <typeparam name="T1">数据类型1</typeparam>       
            <param name="cmdText">查询命令(包括分页语句和求总数语句)</param>
            <param name="parames">命令参数</param>       
            <param name="cmdType">命令类型</param>        
            <returns>列表数据</returns>
        </member>
        <member name="T:Lx.Common.Features.Helper.GlobalHelper">
            <summary>
            功能描述:系统公共帮助类
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.GetValue``1(System.Object,``0)">
            <summary>
            功能:获取一个转换类型后的值
            </summary>
            <typeparam name="T">转换的类型</typeparam>
            <param name="value">待转换类型的值</param>
            <param name="defaultValue">默认值</param>
            <returns>value的泛型值,如果不value不是T类型的,就返回默认值</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.ConvertType``1(System.String)">
            <summary>
                功能：将字符串转换为特定类型，现在只支持原生类型以及数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.GetLowerString(System.String)">
            <summary>
            功能: 获取小写字符串
            </summary>
            <param name="strData">原始字符数据</param>
            <returns>小写字符串</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.ParseStringData``1(System.String,System.String)">
            <summary>
            功能:将字符串转换成等效的类型
            </summary>
            <param name="strValue">待转换的文本</param>
            <param name="strDefaultValue">默认值</param>
            <returns>转换后类型</returns>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.GetBdMessageValue(System.String,System.Object[])">
            <summary>
              功能：通过消息代码获取消息正文
            </summary>
            <param name="msgCode">消息代码</param>
            <param name="formatArgs">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.GetNewGuid(System.Boolean)">
            <summary>
            功能:获取新的Guid
            </summary>
            <param name="blnUseFormat">是否需要格式化值</param>
            <returns>新的Guid</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.GlobalHelper.GetMachineName">
            <summary>
            功能:获取机器的名称和IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Features.Helper.ObjectFactoryHelper">
            <summary>
            对象工厂帮助类 
            </summary>
        </member>
        <member name="M:Lx.Common.Features.Helper.ObjectFactoryHelper.CreateTypeInstance``1(System.String,System.Boolean)">
            <summary>
            功能:创建对象实例
            </summary>
            <typeparam name="T">实例的接口类型</typeparam>
            <param name="strClassFullName">实例的类全名称(命名空间.类型名,程序集)</param>   
            <param name="ignoreCase">类全名是否区分大小写</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ObjectFactoryHelper.CreateTypeInstance``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            功能:创建对象实例
            </summary>
            <typeparam name="T">实例的接口类型</typeparam>
            <param name="strAssemblyName">类型所在程序集名称</param>
            <param name="strClassNameSpace">类型所在命名空间</param>
            <param name="strClassName">类型名称</param>
            <param name="ignoreCase">类名是否区分大小写</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ObjectFactoryHelper.CreateInstance``1(System.String,System.String,System.Boolean)">
            <summary>
            功能:创建对象实例
            </summary>
            <typeparam name="T">实例的接口类型</typeparam>
            <param name="strClassName">实例的类名称</param>
            <param name="strClassNameSpace">实例的类所在的空间名称</param>
            <param name="blnCreateNew">是否每次创建新对象</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Lx.Common.Features.Helper.ObjectFactoryHelper.CreateInstanceUseKey``1(System.String,System.String,System.Boolean)">
            <summary>
            功能:创建对象实例
            </summary>
            <typeparam name="T">实例的接口类型</typeparam>
            <param name="strClassNameKey">实例的类名称键值</param>
            <param name="strClassNameSpaceKey">实例的类所在的空间名称键值</param>
            <param name="blnCreateNew">是否每次创建新对象</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:Lx.Common.Helper.CreateNoHelper">
            <summary>
            功能描述：唯一编号生成器 生成订单编号
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.CreateNoHelper.CreatPayOrderNo">
            <summary>
            功能描述：平台代单号生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.CreateNoHelper.GetRandomNumberKeyNo">
            <summary>
            功能描述：生成唯一的编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.CreateNoHelper.GetUniqueCode(System.Int32)">
            <summary>
            功能:获取Guid的唯一HashCode值
            </summary>
            <param name="intDigit"></param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Helper.FileHelper">
            <summary>
            功能描述:文件帮助类 
            </summary>
        </member>
        <member name="F:Lx.Common.Helper.FileHelper.m_synclock">
            <summary>
            文件同步访问对象
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.#ctor">
            <summary>
            防止实例化
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.WriteFileData(System.String,System.String)">
            <summary>
            功能:获取Hash描述表写入数据到文件
            </summary>
            <param name="strValue">待写入的数据</param>        
            <param name="strFilePath">待写入文件的路径</param>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.WriteFileData(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            功能:获取Hash描述表写入数据到文件
            </summary>
            <param name="lstValue">待写入的数据</param>       
            <param name="strFilePath">待写入文件的路径</param>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.WriteFileData(System.String,System.String,System.Boolean)">
            <summary>
            功能:获取Hash描述表写入数据到文件
            </summary>
            <param name="strValue">待写入的数据</param>
            <param name="blnAppend">是否是追加数据</param>
            <param name="strFilePath">待写入文件的路径</param>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.WriteFileData(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            功能:获取Hash描述表写入数据到文件
            </summary>
            <param name="lstValue">待写入的数据</param>
            <param name="blnAppend">是否是追加数据</param>
            <param name="strFilePath">待写入文件的路径</param>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.ReadFileData(System.String)">
            <summary>
            功能:获取Hash描述表读取文件内容
            </summary>
            <param name="strFilePath">文件路径</param>        
            <returns>文件内容</returns> 
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.ReadFileByteData(System.String)">
            <summary>
            功能:获取Hash描述表读取文件内容
            </summary>
            <param name="strFilePath">文件路径</param>        
            <returns>文件内容</returns> 
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.ReadFileData(System.String,System.Text.Encoding)">
            <summary>
            功能:获取Hash描述表读取文件内容
            </summary>
            <param name="strFilePath">文件路径</param>
            <param name="fileEncoding">文件编码</param>
            <returns>文件内容</returns> 
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.DeleteFile(System.String)">
            <summary>
            功能:获取Hash描述表删除文件
            </summary>
            <param name="strFilePath">文件路径</param>
        </member>
        <member name="M:Lx.Common.Helper.FileHelper.IsFileExist(System.String)">
            <summary>
            功能:获取Hash描述表判断文件是否存在
            </summary>
            <param name="strFilePath">文件路径</param>
            <returns>文件是否存在</returns>
        </member>
        <member name="T:Lx.Common.Helper.MessageQueueHelper">
            <summary>
            功能：message queue 帮助类
            </summary>
        </member>
        <member name="F:Lx.Common.Helper.MessageQueueHelper._messageQueues">
            <summary>
                队列池
            </summary>
        </member>
        <member name="F:Lx.Common.Helper.MessageQueueHelper.s_messageQueuesLocker">
            <summary>
                消息队列池锁
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.CloseAll">
            <summary>
             功能：关闭消息队列中所有的队列
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.CloseQueue(System.String)">
            <summary>
            功能：移除指定消息队列
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.GetMessageQueue(System.String)">
            <summary>
                功能：获取一个 Message Queue
            </summary>
            <param name="messageQueueName">队列配置文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.GetMessageQueueFromPool(System.String)">
            <summary>
                功能：从消息队列池中获取一个 Message Queue，注意，请勿 Dispose 消息队列池中的 MessageQueue
            </summary>
            <param name="messageQueueName">队列配置文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.#ctor(Lx.Common.Interface.IMessageQueue)">
            <summary>
                功能：创建一个 <see cref="T:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue" />
            </summary>
            <param name="messageQueue"></param>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.GetMessagePublisher(System.String)">
            <summary>
                功能：获取一个消息发布者
            </summary>
            <param name="queue">队列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.GetBroadcastPublisher(System.String)">
            <summary>
                功能：获取一个广播消息发布者
            </summary>
            <param name="queue">队列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.GetMessageReceiver(System.String,System.String)">
            <summary>
                功能：获取一个消息接收者对象
            </summary>
            <param name="queue">列表名称</param>
            <param name="receiverId">接收对象 Id</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Helper.MessageQueueHelper.UnhappylessDisposeMessageQueue.GetBroadcastReceiver(System.String,System.String)">
            <summary>
                功能：获取一个广播消息发布者
            </summary>
            <param name="broadcastName">队列名称</param>
            <param name="receiverId">接收对象 Id</param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Helper.SysLogHelper">
            功能描述:系统日志帮助类 
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.GetLogPath">
            <summary>
            功能:获取日志文件所在路径
            </summary>
            <returns>日志文件所在路径列表</returns>
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.GetErrorLogInfo(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            功能:获取详细错误日志信息
            </summary>
            <param name="ex">异常</param>    
            <param name="blnAddStackTrace">是否添加堆栈跟踪信息</param>
            <param name="blnAddTime">是否添加时间</param>
            <returns>错误日志信息</returns>
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.LogMessage(System.String,System.String,Lx.Common.Models.Var.LogLevel,Lx.Common.Models.Var.WriteLogType,System.String)">
            <summary>
            功能:记录日志消息到本地
            </summary>
            <param name="strSource">消息来源</param>
            <param name="strMessage">消息</param>
            <param name="strAddition">日志附加信息</param>
            <param name="logLevel">消息类型</param>
            <param name="writeLogType">输出类型</param>  
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.LogServiceMessage(System.String,System.String,Lx.Common.Models.Var.LogLevel,Lx.Common.Models.Var.WriteLogType,System.String)">
            <summary>
            功能:记录日志消息到日志服务
            </summary>
            <param name="writeLogType">写日志类型</param>
            <param name="logLevel">日志级别</param>
            <param name="strSource">日志的来源</param>
            <param name="strMessage">需记录的日志值</param> 
            <param name="strAddition">日志附加信息</param>
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.LogToConsole(System.String,System.String,System.String,Lx.Common.Models.Var.LogLevel)">
            <summary>
            功能:记录日志到控制台
            </summary>
            <param name="strSource">消息来源</param>
            <param name="strMessage">消息</param>
            <param name="logAddition">日志附加信息</param>
             <param name="logLevel">消息类型</param>
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.LogToFile(System.String,System.String,System.String,Lx.Common.Models.Var.LogLevel)">
            <summary>
            功能:记录日志到文件
            </summary>
            <param name="strSource">消息来源</param>
            <param name="strMessage">消息</param>
            <param name="logAddition">日志附加信息</param>
            <param name="logLevel">消息类型</param>
        </member>
        <member name="M:Lx.Common.Helper.SysLogHelper.LogToDataBase(System.String,System.String,System.String,Lx.Common.Models.Var.LogLevel)">
            <summary>
            功能:记录日志到数据库
            </summary>
            <param name="strSource">消息来源</param>
            <param name="strMessage">消息</param>
            <param name="logAddition">日志附加信息</param>
            <param name="logLevel">消息类型</param>
        </member>
    </members>
</doc>
