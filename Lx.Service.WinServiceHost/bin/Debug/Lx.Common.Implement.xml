<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lx.Common.Implement</name>
    </assembly>
    <members>
        <member name="T:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy">
            <summary>
                功能：Redis 缓存实现
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.m_multiplexer">
            <summary>
                Redis 连接选择器实例
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.AllowAdmin">
            <summary>
                是否启用管理模式。如果启用管理模式，就可以使用 RemoveAll 这样的高级参数
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Hosts">
            <summary>
                Redis 服务器列表
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Add(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：添加缓存项(服务器上如果Key存在则不添加,否则添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空，表示无过期时间</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.AddAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：添加缓存项(服务器上如果Key存在则不添加,否则添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间；如果为空，表示无过期时间</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间(单位:分钟)；如果为空表示不设过期时间</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
                功能：设置缓存项(服务器上key存在就替换,不存在就添加)
            </summary>
            <param name="key">缓存键值</param>
            <param name="value">缓存值</param>
            <param name="expiry">缓存过期时间(单位:分钟)；如果为空表示不设过期时间</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.RemoveAll">
            <summary>
                功能：移除所有缓存项
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.RemoveAllAsync">
            <summary>
                功能：移除所有缓存项
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Remove(System.String)">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="key">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.RemoveAsync(System.String)">
            <summary>
                功能：移除缓存项(服务器上Key存在就移除)
            </summary>
            <param name="key">缓存项的键值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Get``1(System.String)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <typeparam name="T">缓存项的类型</typeparam>
            <param name="key">缓存项的键值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetAsync``1(System.String)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <typeparam name="T">缓存项的类型</typeparam>
            <param name="key">缓存项的键值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：批量获取缓存
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="keys">缓存键数组</param>
            <returns>缓存对像集合</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                功能：批量获取缓存
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="keys">缓存键数组</param>
            <returns>缓存对像集合</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.InitCounter(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.InitCounter(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.InitCounterAsync(System.String,System.Int64)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.InitCounterAsync(System.String,System.Double)">
            <summary>
                功能：初始化计数器
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">初始值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.ChangeCounter(System.String,System.Int64)">
            <summary>
                功能：调整计数器
            </summary>
            <param name="key">计数器的键值</param>
            <param name="value">要调整的值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.ChangeCounter(System.String,System.Double)">
            <summary>
                功能：获取缓存项的值
            </summary>
            <param name="key">缓存项的键值</param>
            <param name="value">要增加的值</param>
            <returns>当前值</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.ChangeCounterAsync(System.String,System.Int64)">
            <summary>
                功能：调整计数器
            </summary>
            <param name="key">计数器的键值</param>
            <param name="value">要调整的值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.ChangeCounterAsync(System.String,System.Double)">
            <summary>
                功能：调整计数器
            </summary>
            <param name="key">计数器的键值</param>
            <param name="value">要调整的值</param>
            <returns>获取到的缓存项</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetCounter(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetDoubleCounter(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetCounterAsync(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.GetDoubleCounterAsync(System.String)">
            <summary>
                功能：获取计数器值
            </summary>
            <param name="key">计数器的键值</param>
            <returns>计数器当前值</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Contains(System.String)">
            <summary>
                功能：判断缓存项是否存在
            </summary>
            <param name="key">缓存项键值</param>
            <returns>缓存项是否存在</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.ContainsAsync(System.String)">
            <summary>
                功能：判断缓存项是否存在
            </summary>
            <param name="key">缓存项键值</param>
            <returns>缓存项是否存在</returns>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisCacheStrategy.Lx#Common#Interface#IComponent#Init">
            <summary>
                功能：初始化组件
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.CacheStrategy.RedisHostEntry">
            <summary>
            功能： Redis 主机配置节点
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.CacheStrategy.RedisHostEntry.Host">
            <summary>
                主机送，可使用 IP 或者域名
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.CacheStrategy.RedisHostEntry.Port">
            <summary>
                端口
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisHostEntry.#ctor">
            <summary>
                功能：构建函数
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.CacheStrategy.RedisHostEntry.ToEntPoint">
            <summary>
                功能：转换为 EndPoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource">
            <summary>
            Ms Sql数据库操作实现    
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.TestConnection">
            <summary>
            功能:测试连接
            </summary>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.GetDBCurrentTime">
            <summary>
            功能:获取数据库当前时间函数名称
            </summary>
            <returns>数据库当前时间函数名称</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.GetLeftColumnSymbol">
            <summary>
            功能:获取字段左引用符号
            </summary>
            <returns>字段左引用符号</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.GetRightColumnSymbol">
            <summary>
            功能:获取字段右引用符号
            </summary>
            <returns>字段右引用符号</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.GetParameterSymbol">
            <summary>
            功能:参数符号
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.GetPageSql(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="intPageNo">页码</param>
            <param name="intPageSize">页大小</param>
            <param name="strSortBy">排序信息</param>        
            <returns>分页Sql</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.QueryData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="commandText">查询命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.QueryData(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="commandText">查询命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="outPutValue">输出参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.SaveData(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:从数据库中删除数据
            </summary>       
            <param name="commandText">保存命令</param>
            <param name="commandType">命令类型</param>
            <param name="lstParameters">命令参数列表</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:获取数据库单值
            </summary>       
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.ExecuteNonQuery(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <param name="outPutValue">输出参数值</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MsSqlDBDataSource.SetCommandParameter(System.Data.SqlClient.SqlCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            功能:设置命令参数
            </summary>
            <param name="cmd">命令</param>
            <param name="dictParam">参数值</param>
            <param name="needOutParam">是否返回输出参数(参数名:outResult)</param>
        </member>
        <member name="T:Lx.Common.Implement.DBDataSource.MySqlDBDataSource">
            <summary>
            功能:My Sql数据库操作实现 
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.TestConnection">
            <summary>
            功能:测试连接
            </summary>
            <returns>连接是否成功</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.GetDBCurrentTime">
            <summary>
            功能:获取数据库当前时间函数名称
            </summary>
            <returns>数据库当前时间函数名称</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.GetLeftColumnSymbol">
            <summary>
            功能:获取字段左引用符号
            </summary>
            <returns>字段左引用符号</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.GetRightColumnSymbol">
            <summary>
            功能:获取字段右引用符号
            </summary>
            <returns>字段右引用符号</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.GetParameterSymbol">
            <summary>
            功能:参数符号
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.GetPageSql(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            功能:获取分页Sql语句
            </summary>
            <param name="strSql">读取数据sql</param>
            <param name="intPageNo">页码, 从0开始</param>
            <param name="intPageSize">页大小</param>
            <param name="strSortBy">排序信息</param>        
            <returns>分页Sql</returns>
        </member>
        <member name="F:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.s_orderByRegex">
            <summary>
            排序过滤表达式
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.QueryData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="commandText">查询命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.QueryData(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
            <summary>
            功能:从数据库中查询数据
            </summary>       
            <param name="commandText">查询命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="outPutValue">输出参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.SaveData(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:保存数据到数据库(包括新增、修改、删除)
            </summary>       
            <param name="commandText">保存命令</param>
            <param name="commandType">命令类型</param>
            <param name="lstParameters">命令参数列表</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:获取数据库单值
            </summary>       
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.ExecuteNonQuery(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType,System.Boolean)">
            <summary>
            功能:执行命令语句
            </summary>
            <param name="commandText">命令</param>
            <param name="commandType">命令类型</param>
            <param name="commandParameters">命令参数</param>
            <param name="useTran">是否使用事物</param>
            <param name="outPutValue">输出参数值</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Lx.Common.Implement.DBDataSource.MySqlDBDataSource.SetCommandParameter(MySql.Data.MySqlClient.MySqlCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            功能:设置命令参数
            </summary>
            <param name="cmd">命令</param>
            <param name="dictParam">参数值</param>
            <param name="needOutParam">是否返回输出参数(参数名:outResult)</param>
        </member>
        <member name="T:Lx.Common.Implement.Extension.DisposeExtension">
            <summary>
            功能描述：释放资源帮助类
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.Extension.DisposeExtension.Dispose``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             功能：释放 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueueChannel">
            <summary>
                功能：消息通道
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueueChannel.Uri">
            <summary>
                连接URL
            </summary>
            <example>
                tcp://activemqhost:61616
            </example>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueueChannel.UserName">
            <summary>
                brocker 用户名, 不填用户名，则不使用用户名密码进行验证
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueueChannel.Password">
            <summary>
                brocker 密码
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueue">
            <summary>
            功能：ActiveMQ 消息队列包装
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.ExternPropertyNameMessageTypeName">
            <summary>
                消息完成类名变量
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.m_connections">
            <summary>
                mq 连接实例
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.m_channelDeliver">
            <summary>
                通道分发器
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.m_receiverDeliver">
            <summary>
                接收者分发器
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.Channels">
            <summary>
            所有的通道
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.ChannelDelivers">
            <summary>
             通道分发器
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.ReceiverDelivers">
            <summary>
                接收者分发器
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.DefaultQueueName">
            <summary>
                默认队列名
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.IsAsync">
            <summary>
                是否启用异步
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.#ctor">
            <summary>
                功能：构建一个 <see cref="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueue" /> 对象
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetMessagePublisher(System.String)">
            <summary>
              功能：获取一个消息发布者
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetBroadcastPublisher(System.String)">
            <summary>
             功能：获取一个广播消息发布者
            </summary>
            <param name="queue">队列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetMessageReceiver(System.String,System.String)">
            <summary>
             功能：获取一个消息接收者对象
            </summary>
            <param name="queue">列表名称</param>
            <param name="receiverId">接收器名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetBroadcastReceiver(System.String,System.String)">
            <summary>
                功能：获取一个广播消息接收器
            </summary>
            <param name="broadcastName">通道名称</param>
            <param name="receiverId">接收器名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetConnections">
            <summary>
            功能：获取内部连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetChannelDeliver">
            <summary>
            功能：获取队列分发器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.SetChannelDeliver(Lx.Common.Implement.MessageQueue.IActiveMqChannelDeliver)">
            <summary>
            功能：设置队列分发器
            </summary>
            <param name="channelDeliver"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetReceiverDeliver">
            <summary>
            功能：获取接收者分发器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.SetReceiverDeliver(Lx.Common.Implement.MessageQueue.IActiveMQReceiverDeliver)">
            <summary>
             功能：设置接收者分发器
            </summary>
            <param name="receiverDeliver"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.GetDefaultChannelName">
            <summary>
            功能：获取默认队列名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.Lx#Common#Interface#IComponent#Init">
            <summary>
                功能：初始化组件
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CreateChannelDeliver(Newtonsoft.Json.Linq.JObject)">
            <summary>
            功能：创建一个消息分发器
            </summary>
            <param name="channelDeliver">分发器配置</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CreateReceiverDeliver(Newtonsoft.Json.Linq.JObject)">
            <summary>
             功能：创建一个接收者分发器
            </summary>
            <param name="channelDeliver">接收者分发器参数</param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeReceiverDeliver">
            <summary>
            功能：混合接收者分发器，将多个接收者分发器混合到一起
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeReceiverDeliver.m_delivers">
            <summary>
                接收者分发器集合
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeReceiverDeliver.GetReceiverId(System.Object)">
            <summary>
                功能：获取消息接收者的 Id
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeReceiverDeliver.Add(Lx.Common.Implement.MessageQueue.IActiveMQReceiverDeliver)">
            <summary>
                功能：添加一个消息接收者分发器
            </summary>
            <param name="deliver">消息接收者分发器</param>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeChannelDeliver">
            <summary>
                功能：混合通道分发器，将多个通道分发器混合到一起
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeChannelDeliver.m_channelDelivers">
            <summary>
                消息分发器集合
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeChannelDeliver.GetChannelName(System.Object)">
            <summary>
             功能：获取队列的名称
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueue.CompositeChannelDeliver.Add(Lx.Common.Implement.MessageQueue.IActiveMqChannelDeliver)">
            <summary>
             功能：添加一个消息通道分发器
            </summary>
            <param name="channelDeliver">消息通道分发器</param>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.DefaultReceiverDeliver">
            <summary>
            功能：默认接收者分发器，不标记接收者属性
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.DefaultReceiverDeliver.GetReceiverId(System.Object)">
            <summary>
             功能：获取消息接收者的 Id
            </summary>
            <param name="target">消息</param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.DefaultChannelDeliver">
            <summary>
             功能：默认通道分发器，发送给第一个通道
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.DefaultChannelDeliver.GetChannelName(System.Object)">
            <summary>
             功能：获取队列的名称
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher">
            <summary>
            功能：ActiveMQ 消息发送器
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.#ctor(Apache.NMS.IConnection,System.String)">
            <summary>
            功能：创建一个 Publisher 实例
            </summary>
            <param name="connection">mq 连接</param>
            <param name="queue">队列名称</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.Dispose">
            <summary>
            功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.Put(System.Object,System.String)">
            <summary>
             功能：发送一个消息，将消息发入队列
            </summary>
            <param name="target">被发送的消息</param>
            <param name="receiverId">接收者Id</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.PutAsync(System.Object,System.String)">
            <summary>
              功能：发送一个消息，将消息发入队列 (异步方式)
            </summary>
            <param name="target">被发送的消息</param>
            <param name="receiverId">接收者Id</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.BuildMessage(System.Object,System.String)">
            <summary>
            功能：构建一个消息对象
            </summary>
            <param name="target">实际要传输的内容</param>
            <param name="receiverId">接收者ID</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.Dispose(System.Boolean)">
            <summary>
                功能：回收资源
            </summary>
            <param name="disposing">是否使用 Dispose 回收</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.Finalize">
            <summary>
                功能：允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.m_producer">
            <summary>
                ActiveMQ 消息生产者
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublisher.m_session">
            <summary>
                会话实例
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers">
            <summary>
                功能：ActiveMQ 消息发送者集合
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.m_channelDeliver">
            <summary>
                通道分发器
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.m_messageQueue">
            <summary>
                消息队列
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.#ctor(Lx.Common.Implement.MessageQueue.ActiveMessageQueue,System.String)">
            <summary>
                功能：创建一个 Publisher 实例
            </summary>
            <param name="messageQueue">mq 连接</param>
            <param name="queueName">队列名称</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.Put(System.Object)">
            <summary>
             功能：发送一个消息，将消息发入队列
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.PutAsync(System.Object)">
            <summary>
            功能：发送一个消息，将消息发入队列
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.GetPublisher(System.String)">
            <summary>
            功能：获取指定通道名的消息发送器
            </summary>
            <param name="channelName">消息通道名称</param>
            <returns></returns>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.Dispose(System.Boolean)">
            <summary>
                功能：回收资源
            </summary>
            <param name="disposing">是否使用 Dispose 回收</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.Finalize">
            <summary>
                功能：允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.m_publishers">
            <summary>
                MQ发布者列表
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessagePublishers.m_receiverDeliver">
            <summary>
                消息接收者分发器
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.IActiveMQReceiverDeliver">
            <summary>
                功能：消息接收者分发器
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.IActiveMQReceiverDeliver.GetReceiverId(System.Object)">
            <summary>
                功能：获取消息接收者的 Id
            </summary>
            <param name="target">消息</param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers">
            <summary>
                功能：消息接收者实现
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.m_messageQueue">
            <summary>
                消息队列
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.m_queueName">
            <summary>
                队列名称
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.m_receiverId">
            <summary>
                接收者ID
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.m_receivers">
            <summary>
                消息接收者集合
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.#ctor(Lx.Common.Implement.MessageQueue.ActiveMessageQueue,System.String,System.String)">
            <summary>
                功能：创建一个消息接收者集合
            </summary>
            <param name="messageQueue"></param>
            <param name="queueName"></param>
            <param name="receiverId"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="E:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.Received">
            <summary>
                接收消息事件
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.Start">
            <summary>
                功能：启动监听
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.receiver_Received(System.Object,Lx.Common.Interface.MessageEventArgs)">
            <summary>
                功能：收到消息事件
            </summary>
            <param name="sender">发送者</param>
            <param name="e">消息参数</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.Dispose(System.Boolean)">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing">是否通过 .Dispose 方法释放资源</param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceivers.Finalize">
            <summary>
                功能：允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver">
            <summary>
            功能：消息接收器
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.m_channelName">
            <summary>
                队列名称
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.m_connection">
            <summary>
                连接实例
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.m_receiver">
            <summary>
                消息接收者
            </summary>
        </member>
        <member name="F:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.m_session">
            <summary>
                当前会话
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.#ctor(System.String,Apache.NMS.IConnection,System.String,System.String)">
            <summary>
              功能：创建一个 ActiveMessageQueueMessageReceiver
            </summary>
            <param name="channelName">通道名称</param>
            <param name="connection"></param>
            <param name="queue"></param>
            <param name="receiverId"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.Dispose">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.m_receiver_Listener(Apache.NMS.IMessage)">
            <summary>
                功能：处理接收到的消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.Dispose(System.Boolean)">
            <summary>
                功能：执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing">是否通过 .Dispose 方法释放资源</param>
        </member>
        <member name="E:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.Received">
            <summary>
                接收到消息事件
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.ActiveMessageQueueMessageReceiver.Finalize">
            <summary>
                功能：允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。
            </summary>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.IActiveMqChannelDeliver">
            <summary>
                功能：通道分发器
            </summary>
        </member>
        <member name="M:Lx.Common.Implement.MessageQueue.IActiveMqChannelDeliver.GetChannelName(System.Object)">
            <summary>
                功能：获取队列的名称
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Lx.Common.Implement.MessageQueue.ActiveMQHostEntry">
            <summary>
            功能： MQ 主机配置节点
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMQHostEntry.Uri">
            <summary>
                连接URL
            </summary>
            <example>
                tcp://activemqhost:61616
            </example>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMQHostEntry.UserName">
            <summary>
                brocker 用户名, 不填用户名，则不使用用户名密码进行验证
            </summary>
        </member>
        <member name="P:Lx.Common.Implement.MessageQueue.ActiveMQHostEntry.Password">
            <summary>
                brocker 密码
            </summary>
        </member>
    </members>
</doc>
